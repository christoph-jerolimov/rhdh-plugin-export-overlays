name: Label Workspace PRs

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6:00 AM UTC
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  label-workspace-prs:
    runs-on: ubuntu-latest
    name: Label PRs based on Workspace Changes
    
    permissions:
      contents: read
      pull-requests: write
      issues: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Label PRs based on workspace changes
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the downstream-plugins file to get required plugins
            const downstreamPluginsContent = fs.readFileSync('downstream-plugins', 'utf8');
            const requiredPlugins = [];
            
            const lines = downstreamPluginsContent.split('\n');
            for (const line of lines) {
              const trimmedLine = line.trim();
              // Skip empty lines and comments
              if (trimmedLine === '' || trimmedLine.startsWith('#')) {
                continue;
              }
              requiredPlugins.push(trimmedLine);
            }
            
            console.log(`Found ${requiredPlugins.length} required plugins in downstream-plugins`);
            
            // function to check if a workspace contains required plugins
            function workspaceHasRequiredPlugins(workspace) {
              // Check if any required plugin line starts with the workspace name
              return requiredPlugins.some(pluginLine => pluginLine.startsWith(`${workspace}/`));
            }
            
            // Define the labels we'll apply
            const LABELS = {
              UPDATE: 'workspace-update', 
              ADDITION: 'workspace-addition',
              OUTSIDE: 'outside-workspaces',
              MANDATORY: 'mandatory-workspace'
            };
            
            // Ensure all labels exist
            for (const [key, labelName] of Object.entries(LABELS)) {
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: labelName
                });
              } catch (error) {
                if (error.status === 404) {
                  let description, color;
                  switch (key) {
                    case 'UPDATE':
                      description = 'PR modifies files in an existing workspace';
                      color = '0075ca';  // Blue
                      break;
                    case 'ADDITION':
                      description = 'PR adds a new workspace';
                      color = '0e8a16';  // Green
                      break;
                    case 'OUTSIDE':
                      description = 'PR changes files outside workspace directories';
                      color = '6f42c1';  // Purple
                      break;
                    case 'MANDATORY':
                      description = 'PR affects a workspace with required plugins for releases';
                      color = 'd73a4a';  // Red
                      break;
                  }
                  
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: labelName,
                    description: description,
                    color: color
                  });
                  console.log(`Created label: ${labelName}`);
                } else {
                  throw error;
                }
              }
            }
            
            // Get all open PRs
            const prs = await github.paginate(github.rest.pulls.list, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            console.log(`Found ${prs.length} open PRs`);
            
            for (const pr of prs) {
              try {
                console.log(`\n--- Processing PR #${pr.number}: ${pr.title} ---`);
                
                // Get current labels on the PR
                const currentLabels = pr.labels.map(label => label.name);
                const currentWorkspaceLabels = currentLabels.filter(label => 
                  Object.values(LABELS).includes(label)
                );
                
                // Analyze PR files to know what changes this PR contains
                const prFiles = await github.rest.pulls.listFiles({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number
                });
                
                // Categorize files
                const workspaceFiles = [];
                const nonWorkspaceFiles = [];
                const addedWorkspaces = new Set();
                const modifiedWorkspaces = new Set();
                
                for (const file of prFiles.data) {
                  const workspaceMatch = file.filename.match(/^workspaces\/([^\/]+)\/.*/);
                  if (workspaceMatch) {
                    const workspace = workspaceMatch[1];
                    workspaceFiles.push({ file, workspace });
                    
                    // Check if this is a new workspace
                    if (file.status === 'added') {
                      addedWorkspaces.add(workspace);
                    } else {
                      modifiedWorkspaces.add(workspace);
                    }
                  } else {
                    nonWorkspaceFiles.push(file);
                  }
                }
                
                // Remove workspaces from addedWorkspaces if they also have modifications
                for (const workspace of modifiedWorkspaces) {
                  addedWorkspaces.delete(workspace);
                }
                
                // Determine label(s)
                let targetLabels = [];
                let logMessage = `PR #${pr.number}`;
                
                if (workspaceFiles.length === 0) {
                  // No workspace files changed - outside workspaces
                  targetLabels = [LABELS.OUTSIDE];
                  logMessage += ` affects only non-workspace files`;
                  
                } else {
                  const allAffectedWorkspaces = new Set([...addedWorkspaces, ...modifiedWorkspaces]);
                  
                  if (allAffectedWorkspaces.size === 1) {
                    // Single workspace affected
                    const workspace = Array.from(allAffectedWorkspaces)[0];
                    
                    if (addedWorkspaces.has(workspace)) {
                      targetLabels = [LABELS.ADDITION];
                      logMessage += ` adds new workspace: ${workspace}`;
                    } else {
                      targetLabels = [LABELS.UPDATE];
                      logMessage += ` updates workspace: ${workspace}`;
                    }
                    
                    // Check if this workspace contains required plugins
                    if (workspaceHasRequiredPlugins(workspace)) {
                      targetLabels.push(LABELS.MANDATORY);
                      logMessage += ` (contains required plugins)`;
                    }
                  } else {
                    // Multiple workspaces affected - this should not be labeled for publishing at least from what i understand
                    targetLabels = []; // No specific labels
                    logMessage += ` affects multiple workspaces: ${Array.from(allAffectedWorkspaces).join(', ')}`;
                    
                    // Note: we intentionally don't label multi-workspace PRs as they can't be published or they are hard to publish after talk with david
                  }
                }
                
                console.log(logMessage);
                
                // Apply label changes
                const labelsToAdd = targetLabels.filter(label => !currentLabels.includes(label));
                const labelsToRemove = currentWorkspaceLabels.filter(label => !targetLabels.includes(label));
                
                // Add new labels
                if (labelsToAdd.length > 0) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    labels: labelsToAdd
                  });
                  console.log(`Added labels: ${labelsToAdd.join(', ')}`);
                }
                
                // Remove old labels
                for (const label of labelsToRemove) {
                  try {
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: pr.number,
                      name: label
                    });
                    console.log(`Removed label: ${label}`);
                  } catch (error) {
                    if (error.status !== 404) {
                      console.error(`Failed to remove label ${label}:`, error.message);
                    }
                  }
                }
                
                if (labelsToAdd.length === 0 && labelsToRemove.length === 0) {
                  console.log(`âœ“ Labels already correct`);
                }
                
              } catch (error) {
                console.error(`Error processing PR #${pr.number}:`, error.message);
                // Continue with next PR instead of failing the entire workflow
              }
            }
            
            console.log('Finished labeling workspace PRs');
